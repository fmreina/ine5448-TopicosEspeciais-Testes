AORB_1:40:void_moveUpEmptyCellTest():startPosition.getLine() - 1 => startPosition.getLine() * 1
AORB_2:40:void_moveUpEmptyCellTest():startPosition.getLine() - 1 => startPosition.getLine() / 1
AORB_3:40:void_moveUpEmptyCellTest():startPosition.getLine() - 1 => startPosition.getLine() % 1
AORB_4:40:void_moveUpEmptyCellTest():startPosition.getLine() - 1 => startPosition.getLine() + 1
AORB_5:49:void_moveDownEmptyCellTest():startPosition.getLine() + 1 => startPosition.getLine() * 1
AORB_6:49:void_moveDownEmptyCellTest():startPosition.getLine() + 1 => startPosition.getLine() / 1
AORB_7:49:void_moveDownEmptyCellTest():startPosition.getLine() + 1 => startPosition.getLine() % 1
AORB_8:49:void_moveDownEmptyCellTest():startPosition.getLine() + 1 => startPosition.getLine() - 1
AORB_9:58:void_moveLeftEmptyCellTest():startPosition.getColumn() - 1 => startPosition.getColumn() * 1
AORB_10:58:void_moveLeftEmptyCellTest():startPosition.getColumn() - 1 => startPosition.getColumn() / 1
AORB_11:58:void_moveLeftEmptyCellTest():startPosition.getColumn() - 1 => startPosition.getColumn() % 1
AORB_12:58:void_moveLeftEmptyCellTest():startPosition.getColumn() - 1 => startPosition.getColumn() + 1
AORB_13:67:void_moveRightEmptyCellTest():startPosition.getColumn() + 1 => startPosition.getColumn() * 1
AORB_14:67:void_moveRightEmptyCellTest():startPosition.getColumn() + 1 => startPosition.getColumn() / 1
AORB_15:67:void_moveRightEmptyCellTest():startPosition.getColumn() + 1 => startPosition.getColumn() % 1
AORB_16:67:void_moveRightEmptyCellTest():startPosition.getColumn() + 1 => startPosition.getColumn() - 1
AOIU_1:21:void_putTilesInTheBoardTest():dimension => -dimension
AOIS_1:21:void_putTilesInTheBoardTest():dimension => dimension++
AOIS_2:21:void_putTilesInTheBoardTest():dimension => dimension--
LOI_1:21:void_putTilesInTheBoardTest():dimension => ~dimension
SDL_1:31:void_putTilesInTheBoardTest(): int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );  =>   int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );
SDL_2:31:void_putTilesInTheBoardTest(): int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );  =>   int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );
SDL_3:31:void_putTilesInTheBoardTest(): int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );  =>   int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );
SDL_4:31:void_putTilesInTheBoardTest(): int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );  =>   int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );
SDL_5:31:void_putTilesInTheBoardTest(): int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );  =>   int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );
SDL_6:31:void_putTilesInTheBoardTest(): int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );  =>   int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );
SDL_7:31:void_putTilesInTheBoardTest(): int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );  =>   int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); game.putTilesInTheBoard( board, listOfTiles );
SDL_8:31:void_putTilesInTheBoardTest(): int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) ); game.putTilesInTheBoard( board, listOfTiles );  =>   int dimension = 3; domain.ShufflePuzzleLevelTest shuffler = new domain.ShufflePuzzleLevelTest(); domain.PuzzleGame game = new domain.PuzzleGame( dimension, shuffler ); domain.SquareBoard board = new domain.SquareBoard( 2 ); java.util.List<Tile> listOfTiles = new java.util.ArrayList<Tile>(); listOfTiles.add( new domain.Tile( 1 ) ); listOfTiles.add( new domain.Tile( 2 ) ); listOfTiles.add( new domain.Tile( 3 ) ); game.putTilesInTheBoard( board, listOfTiles ); assertEquals( listOfTiles.get( 0 ), board.getTile( new domain.Position( 1, 1 ) ) ); assertEquals( listOfTiles.get( 1 ), board.getTile( new domain.Position( 1, 2 ) ) ); assertEquals( listOfTiles.get( 2 ), board.getTile( new domain.Position( 2, 1 ) ) );
SDL_9:40:void_moveUpEmptyCellTest(): domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; game.moveEmptyCell( Direction.UP ); domain.Position endPosition = game.emptyCell; assertEquals( endPosition.getLine(), startPosition.getLine() - 1 );  =>   domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; domain.Position endPosition = game.emptyCell; assertEquals( endPosition.getLine(), startPosition.getLine() - 1 );
SDL_10:40:void_moveUpEmptyCellTest(): domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; game.moveEmptyCell( Direction.UP ); domain.Position endPosition = game.emptyCell; assertEquals( endPosition.getLine(), startPosition.getLine() - 1 );  =>   domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; game.moveEmptyCell( Direction.UP ); domain.Position endPosition = game.emptyCell;
SDL_11:49:void_moveDownEmptyCellTest(): domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; game.moveEmptyCell( Direction.DOWN ); domain.Position endPosition = game.emptyCell; assertEquals( endPosition.getLine(), startPosition.getLine() + 1 );  =>   domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; domain.Position endPosition = game.emptyCell; assertEquals( endPosition.getLine(), startPosition.getLine() + 1 );
SDL_12:49:void_moveDownEmptyCellTest(): domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; game.moveEmptyCell( Direction.DOWN ); domain.Position endPosition = game.emptyCell; assertEquals( endPosition.getLine(), startPosition.getLine() + 1 );  =>   domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; game.moveEmptyCell( Direction.DOWN ); domain.Position endPosition = game.emptyCell;
SDL_13:58:void_moveLeftEmptyCellTest(): domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; game.moveEmptyCell( Direction.LEFT ); domain.Position endPosition = game.emptyCell; assertEquals( endPosition.getColumn(), startPosition.getColumn() - 1 );  =>   domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; domain.Position endPosition = game.emptyCell; assertEquals( endPosition.getColumn(), startPosition.getColumn() - 1 );
SDL_14:58:void_moveLeftEmptyCellTest(): domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; game.moveEmptyCell( Direction.LEFT ); domain.Position endPosition = game.emptyCell; assertEquals( endPosition.getColumn(), startPosition.getColumn() - 1 );  =>   domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; game.moveEmptyCell( Direction.LEFT ); domain.Position endPosition = game.emptyCell;
SDL_15:67:void_moveRightEmptyCellTest(): domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; game.moveEmptyCell( Direction.RIGHT ); domain.Position endPosition = game.emptyCell; assertEquals( endPosition.getColumn(), startPosition.getColumn() + 1 );  =>   domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; domain.Position endPosition = game.emptyCell; assertEquals( endPosition.getColumn(), startPosition.getColumn() + 1 );
SDL_16:67:void_moveRightEmptyCellTest(): domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; game.moveEmptyCell( Direction.RIGHT ); domain.Position endPosition = game.emptyCell; assertEquals( endPosition.getColumn(), startPosition.getColumn() + 1 );  =>   domain.PuzzleGame game = new domain.PuzzleGame( 3, new domain.ShufflePuzzleLevelTest() ); domain.Position startPosition = game.emptyCell; game.moveEmptyCell( Direction.RIGHT ); domain.Position endPosition = game.emptyCell;
ODL_1:40:void_moveUpEmptyCellTest():startPosition.getLine() - 1 => startPosition.getLine()
ODL_2:40:void_moveUpEmptyCellTest():startPosition.getLine() - 1 => 1
ODL_3:49:void_moveDownEmptyCellTest():startPosition.getLine() + 1 => startPosition.getLine()
ODL_4:49:void_moveDownEmptyCellTest():startPosition.getLine() + 1 => 1
ODL_5:58:void_moveLeftEmptyCellTest():startPosition.getColumn() - 1 => startPosition.getColumn()
ODL_6:58:void_moveLeftEmptyCellTest():startPosition.getColumn() - 1 => 1
ODL_7:67:void_moveRightEmptyCellTest():startPosition.getColumn() + 1 => startPosition.getColumn()
ODL_8:67:void_moveRightEmptyCellTest():startPosition.getColumn() + 1 => 1
CDL_1:40:void_moveUpEmptyCellTest():startPosition.getLine() - 1 => startPosition.getLine()
CDL_2:49:void_moveDownEmptyCellTest():startPosition.getLine() + 1 => startPosition.getLine()
CDL_3:58:void_moveLeftEmptyCellTest():startPosition.getColumn() - 1 => startPosition.getColumn()
CDL_4:67:void_moveRightEmptyCellTest():startPosition.getColumn() + 1 => startPosition.getColumn()
